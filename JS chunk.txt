

Eloquent Javascript Takeway
Language hide detail not enjoying.
No need to specify how program jump back and forth but while or do for construct [loop] will..
bit has to be put in chunk[values] to understand it.Values can number ,text  and other functions.
Assuming where values take over computer storage then there is need to put some where to free space .
Values of number eg 3
number use  64 bits to  store particular number.Similarly, given 64 binary
digits, is represented 10 raised to the power 64[That is 10^24] which is equals about 18 quintillion
(18,446,744,073,709,552,000 or an 18 with 18 zeros after it).Computer memory used to be much smaller, and people tended to use groups
of 8 or 16 bits to represent their numbers.
What about negative bit can be used to store decimal number and nonwhole and even decimals point . These has to be represented.
2.998e8 =2998 *[10 to the power 8] .This type of number has been represented but taking 9 quadrillion (15 zeros) .So 9 quadrillion (15 zeros) goes  beyond 64 bit hence can not be represented.
many numbers lose some precision when only 64 bits are available to store them.

Operator s:
 % is remainder operator  4%2=0 ; 7%2=1
  Arithmetic operation : use parentheses to escape if you donot know precendence of operators.
Special numbers:
Infinity is for large positive number while [-Infinity is for negative number].
NaN  is also around and stands for 'Not a number'.
String : 
here text are in enclosed content in quote[double quote,single quote ,back tick to make text].
eg `Hello`, 'Hello',"Hello"
/*Assignment**/ greeting =`Hello` 
Some character which cannot be put under quote should use backslash (\) 
eg in='Fan \n Games';
Another \' eg data= 'Akua\'s name is every where.'; console.log(data)/* output: Akua's name is every where.

To display \ n as test it must be like this [\"\\n\"]
eg sentence=" \\n\ is used in JS"; console.log(sentence)//output: \n is used in Javascript.
eg /*code*/ sentence=" \"\\n\"  is here"; console.log(sentence);//output: "\n"  is here.

String can not perform calculation of any sort by can do concatenation.JS strings uses 16 bits per string element.So some characters, such as many emoji, take
up two “character positions” in JavaScript strings.
example of concatenation 
/*code*/
concatText="Pen" + "is used in traditional school"; console.log(concatText);
/*code*/
news="Noon news" ; update=" is upcoming next"; console.log(news+update+"\nstay glued to your TV set");

Expression eg can number or whatever. eg 22 or any word . Like  sentences humanns use so is it in programming .
Semi-colon are need in Javascript.
binding = variable;
eg let HighTemperature="High";
   let  LowTemperature="Low"
  console.log(HighTemperature);
  console.log(LowTemperature)

Boolean
Tenary 
eg  console.log(false?1:0);

Empty values carry no information eg null and undefined
 
In binding a var is a keyword for declaring varible .
Variable can contain numbers but number should not start any variable and should not contain any puntuation  mark.
It  can contain dollar( $) and (_) underscore
eg $payment=69.00;
   _name="Kobi";

Nan [Not a Number] is nonsensical computation and is the only thing which does equals itself.[day3]
Day 4 [ 14/8/2023]
1. {!== }or 2.{!===   }  The 2 check the the compared stated whether they are the same
 eg for 1: console.log(""!==false) ;//output:true.
        
eg for 2 : console.log(""!===false) ;//output:false : they are not prescisely the same.



Consider these 
a {==}  b{===}
eg console.log(""==false);//output:true
   console.log(""===false)//output:false :[It means the two comparing statement are prescisely the same.]

Boolean operators 
NaN ,0, empty ,"" are counted as false while others a true.NB empty values carries no meanful info.
eg console.log(""||"Meshach")//Output: Meshach

 console.log(0||"Meshach")//Output: Meshach

 console.log(NaN||"Meshach")


other
console.log(0||'!?')
//output: !?

The same goes for [false && X],
which is false and will ignore X. This is called short-circuit evaluation

Expression Vrs Statement Vrs Expression.
Expression is a code that produces a value.
Expression make up statement .
Program is made of more statement.

eg of program
1;
!1;

Statement having effect to machine in order to change state to produce something  hence is called side effect.
egShowing a dialog box or writing text to the screen is a side effect.



Semicolon end the sentences .
binding ==variable; here we attach something but maybe not  stored  in the value
eg: 
ten=10; console.log(ten*ten)
// 100 

eg:
mensahDebt=12;
mensahDebt=mensahDebt-2;
console.log(mensahDebt);
//10

one=1; two=2;
console.log(one*two)
//3 NB:[3 is stored in thin air]


greeting="Good Morning ";
name="Naa";
console.log(greeting+ name);


Binding or variable can any word except keyword.
Number can be attached to binding or variable name  should   not start  number.
Special or reserved words should be binding word
[break case catch class const continue debugger default
delete do else enum export extends false finally for
function if implements import interface in instanceof let
new package private protected public return static super
switch this throw true try typeof var void while with yield
]

Collection of binding or variable  with its value is called environment.


FUNCTION:is a piece of  program that is wrapped in value.egbinding prompt holds a function that shows a little dialog box that can take input.
Function eliminate repetition in program.
code :
prompt("Enter passcode");

Execeuting a function is called calling or invoking or applying .
A function can be called by specifiying  name of function together with parentheses{()}
eg addFunction(),displayResult();
function produces value.
Days left :94
Value passed into the parenthesis is called argument.
Return values :When a function returns value.
eg console.log(Math.max(5,3)) 

console.log display something.
writing text to screen  is side effects .
If a function produces values then we say is returned.

number=Number(prompt("Hello , enter age));
console.log(number)

comment are ignored by computer.
proper branch =Conditional Execution.
statement in braces is block.

if keyword is conditional 

NB: var and let are different let do its work like const



// Displaying from 1 to Millon is unworkable using console.log alone but can be possible with loop.

for(i=1;i<=1000000;i++)
{console.log(i+"/n");}

Loop can for loop,while loop ,do while  and others
These loop has parentheses ,statement and increment or decrement variable .Statement  maybe the condition that should be meet.

//solve this :calculate the 2 raised to the power 10 uisng  loop?
solution:
var answer=2;
for (i=0;i<=9;i++)
{
  answer*=answer;
}
console.log(answer); 